{"version":3,"sources":["SoundButton.js","SoundBoard.js","App.js","serviceWorker.js","index.js"],"names":["ButtonStates","Object","freeze","inactive","loading","playing","id","getId","SoundButton","props","className","this","state","onClick","play","colour","style","display","React","Component","trackGroups","chunkSize","arr","Error","numChunks","Math","ceil","length","result","i","push","slice","separateIntoChunks","sounds","SoundBoard","activeTrack","onPlaybackFinished","bind","onLoadingFinished","src","audioElement","pause","load","setState","createSoundButton","key","playAudio","ref","element","map","track","addEventListener","removeEventListener","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcb04179.chunk.js","sourcesContent":["import React from 'react'\nimport { Spinner } from '@blueprintjs/core'\n\nimport './SoundButton.css'\n\nexport const ButtonStates = Object.freeze({\n  inactive: 0,\n  loading: 1,\n  playing: 2\n})\n\nlet id = 0\nconst getId = () => id++\n\n/**\n * Button that plays a sound.\n */\nexport default class SoundButton extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.id = getId()\n  }\n\n  render () {\n    const defaultColour = '#394b59'\n\n    return <div\n      className={\n        'SoundButton bp3-card bp3-elevation-2 bp3-interactive ' +\n          (this.props.state === ButtonStates.playing ? `SoundButton_playing_${this.id}` : `SoundButton_notplaying_${this.id}`)\n      }\n      onClick={() => {\n        this.props.play()\n      }} >\n      <style>{`\n        .SoundButton_notplaying_${this.id} {\n          background-color: ${defaultColour} !important;\n          transition-property: transform, box-shadow, background-color !important;\n          transition-duration: 0.3s;\n          transition-easing: ease-in-out;\n        }\n\n        .SoundButton_playing_${this.id} {\n          animation: SoundButton_pulse_${this.id} 1s ease-out 0s alternate infinite;\n          transition-property: transform, box-shadow, background-color !important;\n          transition-duration: 0.5s;\n          transition-easing: ease-in-out;\n        }\n\n        @keyframes SoundButton_pulse_${this.id} {\n          0% {\n            background-color: ${defaultColour};\n          }\n          100% {\n            background-color: ${this.props.colour || 'red'}\n          }\n        }\n      `}</style>\n      <div\n        className='Spinner'\n        style={\n          this.props.state === ButtonStates.loading\n            ? { display: 'block' }\n            : { display: 'none' }\n        }>\n        <Spinner />\n      </div>\n    </div>\n  }\n}\n","import React from 'react'\n\nimport SoundButton, { ButtonStates } from './SoundButton'\nimport sounds from './sounds.json'\n\nimport './SoundBoard.css'\n\nconst separateIntoChunks = (chunkSize, arr) => {\n  if (chunkSize <= 0) {\n    throw new Error('chunkSize must be a positive integer')\n  }\n\n  const numChunks = Math.ceil(arr.length / chunkSize)\n  const result = []\n  for (let i = 0; i < numChunks; i++) {\n    result.push(arr.slice(i * chunkSize, i * chunkSize + chunkSize))\n  }\n  return result\n}\n\nconst trackGroups = separateIntoChunks(5, sounds)\n// const tracks = [\n//   ['XXYYXX - XXYYXX - 01 About You.mp3', 'Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav'],\n//   ['XXYYXX - XXYYXX - 02 Good Enough.mp3', 'Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav'],\n//   ['Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav'],\n//   ['Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav', 'Cowbell.wav']\n// ]\n\nexport default class SoundBoard extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      activeTrack: '',\n      loading: false\n    }\n\n    this.onPlaybackFinished = this.onPlaybackFinished.bind(this)\n    this.onLoadingFinished = this.onLoadingFinished.bind(this)\n  }\n\n  playAudio (src) {\n    if (this.state.activeTrack === src) {\n      this.audioElement.pause()\n      this.audioElement.load()\n      this.setState({\n        ...this.state,\n        activeTrack: '',\n        loading: false\n      })\n    } else {\n      this.audioElement.src = 'final-aac/' + src\n      this.setState({\n        ...this.state,\n        activeTrack: src,\n        loading: true\n      })\n      this.audioElement.pause()\n      this.audioElement.load()\n      this.audioElement.play()\n    }\n  }\n\n  onLoadingFinished () {\n    this.setState({\n      ...this.state,\n      loading: false\n    })\n  }\n\n  onPlaybackFinished () {\n    this.setState({\n      ...this.state,\n      activeTrack: ''\n    })\n  }\n\n  render () {\n    const createSoundButton = ({ src, colour }) =>\n      <SoundButton\n        key={src}\n        play={() => this.playAudio(src)}\n        colour={colour}\n        state={\n          this.state.activeTrack === src\n            ? this.state.loading\n              ? ButtonStates.loading\n              : ButtonStates.playing\n            : ButtonStates.inactive\n        }\n      />\n\n    const createButtonRow = (track, id) =>\n      <div key={id} className='ButtonRow'>\n        {track.map(createSoundButton)}\n      </div>\n\n    return <div className='SoundBoard'>\n      <audio ref={element => {\n        if (!element) {\n          return\n        }\n\n        this.audioElement = element\n      }} />\n\n      {trackGroups.map(createButtonRow)}\n\n    </div>\n  }\n\n  componentDidMount () {\n    this.audioElement.addEventListener('loadeddata', this.onLoadingFinished)\n    this.audioElement.addEventListener('ended', this.onPlaybackFinished)\n  }\n\n  componentWillUnmount () {\n    this.audioElement.removeEventListener('loadeddata', this.onLoadingFinished)\n    this.audioElement.removeEventListener('ended', this.onPlaybackFinished)\n  }\n}\n","import React from 'react'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\n\nimport SoundBoard from './SoundBoard'\n\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className=\"App bp3-dark\">\n      <header>\n        <h1 className=\"bp3-heading\">Refuge Aural Moodboard</h1>\n      </header>\n      <SoundBoard />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}